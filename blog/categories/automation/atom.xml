<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | 唯一的真理]]></title>
  <link href="http://leon8693.github.io/blog/categories/automation/atom.xml" rel="self"/>
  <link href="http://leon8693.github.io/"/>
  <updated>2014-10-09T17:42:19+08:00</updated>
  <id>http://leon8693.github.io/</id>
  <author>
    <name><![CDATA[leon]]></name>
    <email><![CDATA[bolatuleon@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[saltstack grains,pillar,sls模板,jinja模板 (四)]]></title>
    <link href="http://leon8693.github.io/blog/2014/09/30/saltstack-grains-pillar-slsmo-ban-jinjamo-ban-4/"/>
    <updated>2014-09-30T16:16:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/09/30/saltstack-grains-pillar-slsmo-ban-jinjamo-ban-4</id>
    <content type="html"><![CDATA[<h2>grains</h2>

<p>grains类似puppet的facter一样 负责采集客户端一些基本信息,也可以自定义</p>

<h4>grains使用</h4>

<p><code>
salt -E 'angel01' grains.ls   #查看有多少定义好的属性可以用
salt -E 'angel01' grains.items #查看所有属性返回的值
salt -E 'angel01' grains.item fqdn os #查看fqdn os 返回的值,以此类推
</code></p>

<h4>grains自定义</h4>

<h5>服务端主动推送</h5>

<p>master上操作 <br/>
```
vim /mnt/config/salt/master
增加默认目录
file_roots:
  base:</p>

<pre><code>  - /mnt/config/salt/
</code></pre>

<p>mkdir -p /mnt/config/salt/<em>grains/
vim /mnt/config/salt/</em>grains/test.py</p>

<h1>&ndash;<em>&ndash; coding: utf-8 &ndash;</em>&ndash;</h1>

<p>&lsquo;&rsquo;&lsquo;
leon test
&rsquo;&lsquo;&rsquo;
import commands
import os</p>

<p>def l_test():</p>

<pre><code>'''
leon test
'''
grains={}
a = commands.getoutput("hostname")
grains['leon_test']=a

return grains
</code></pre>

<p><code>``
使用命令</code>saltutil.sync_all`进行推送</p>

<!-- more -->


<p>再通过salt &lsquo;<em>&rsquo; grains.item leon_test就可以查看了  <br/>
```
[root@angel01 salt]# salt &lsquo;</em>&rsquo; saltutil.sync_all
angel01.i.fdmdns.com:</p>

<pre><code>----------
grains:
    - grains.test
modules:
outputters:
renderers:
returners:
states:
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>----------
grains:
    - grains.test
modules:
outputters:
renderers:
returners:
states:
</code></pre>

<p>[root@angel01 salt]# salt &lsquo;<em>&rsquo; grains.item leon_test
angel01.i.fdmdns.com:
  leon_test: angel01
angel02.i.fdmdns.com:
  leon_test: angel02
<code>
模块进行更改后需要使用`sys.reload_modules`
</code>
[root@angel01 salt]# salt &lsquo;</em>&rsquo; sys.reload_modules
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 salt]# salt &lsquo;*&rsquo; saltutil.sync_all
angel01.i.fdmdns.com:</p>

<pre><code>----------
grains:
    - grains.test
modules:
outputters:
renderers:
returners:
states:
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>----------
grains:
    - grains.test
modules:
outputters:
renderers:
returners:
states:
</code></pre>

<p>[root@angel01 salt]# salt &lsquo;*&rsquo; grains.item leon_test
angel01.i.fdmdns.com:
  leon_test: this is test
angel02.i.fdmdns.com:
  leon_test: this is test
```</p>

<h4>客户端自动汇报</h4>

<p>minion上操作 <br/>
```
vim /etc/salt/minion
default_include: /mnt/config/salt/minion.d/*.conf #增加这项
mkdir -p /mnt/config/salt/minion.d/
vim /mnt/config/salt/minion.d/test.conf
grains:
  leon and leon: 1
  leon and alex: print 2
  cpis:</p>

<pre><code>- a
- b
</code></pre>

<p>  leon.com:</p>

<pre><code>-------------------------------------------------
</code></pre>

<p>/etc/init.d/salt-minion restart</p>

<p>[root@angel01 ~]# salt -E &lsquo;angel01&rsquo; grains.item leon\ and\ leon
angel01.i.fdmdns.com:
  leon and leon: 1
[root@angel01 ~]# salt -E &lsquo;angel01&rsquo; grains.item leon.com
angel01.i.fdmdns.com:
  leon.com: &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
[root@angel01 ~]# salt -E &lsquo;angel01&rsquo; grains.item cpis
angel01.i.fdmdns.com:
  cpis:</p>

<pre><code>  a
  b
</code></pre>

<p>```</p>

<h4>pillar使用</h4>

<p>pillar是用于给特定的minion定义任何你需要的数据,数据可以被salt其他组件使用,Pillar 数据是与特定 minion 关联的，也就是说每一个minion 都只能看到自己的数据， 所以 Pillar 可以用来传递敏感数据。  <br/>
pillar可以通过变量的方式再不同的操作系统或者特定的服务server上进行特别的设置。 <br/>
```</p>

<h1>首先定义pillar的位置</h1>

<p>vim /mnt/config/salt/master
interface: 192.168.0.210
user: root
auto_accept: True
worker_threads: 5
file_roots:
  base:</p>

<pre><code>- /mnt/config/salt/
</code></pre>

<p>pillar_roots:                   #标识pillar目录
  base:</p>

<pre><code>- /mnt/config/salt/pillar
</code></pre>

<p>```</p>

<p>在pilla目录中新建一个top.sls,类似Puppet的入口文件</p>

<p>```
vim /mnt/config/salt/pillar/top.sls
base:       #自定义名称
  &lsquo;<em>&rsquo;:      #客户端过滤,可以是angel0[1-2].</em>,等等
   &ndash; test   #模板名称</p>

<p>vim /mnt/config/salt/pillar/test.sls
MY_NAME: leon
ID: 7758258
CONTENT:  lol</p>

<p>/etc/init.d/salt-master restart
/etc/init.d/salt-minion restart</p>

<p>[root@angel01 pillar]# salt  &lsquo;angel01.i.fdmdns.com&rsquo; pillar.data
angel01.i.fdmdns.com:</p>

<pre><code>----------
CONTENT:
    lol
ID:
    7758258
MY_NAME:
    leon
#这边有master默认的一些信息省略了
</code></pre>

<p>```</p>

<p>下面结合state.sls和jinja做一个抒写一个文件的动作</p>

<p>```bash
vim /mnt/config/salt/top.sls
base:
  &lsquo;*&rsquo;:
   &ndash; test.tmp
mkdir -p /mnt/config/salt/test/
vim /mnt/config/salt/test/tmp.sls
/tmp/tmp.conf:                              #文件位置
  file.managed:                             #采用新增文件的方式
  &ndash; source:  salt://test/tmp.conf.jinja     #jinja资源位置
  &ndash; template: jinja                         #模板</p>

<p>vim /mnt/config/salt/test/tmp.conf.jinja
visible hostname        #通过grains获得的fqdn(hostname)</p>

<h1>                     #前面我用pillar定义的MY_NAME</h1>

<h1>                          #注释的#号自己去掉,双括号情况下在makedown不显示= =！</h1>

<h1>server_os </h1>

<p>salt  &lsquo;*&rsquo; state.highstate -v</p>

<h2>angel01.i.fdmdns.com:</h2>

<pre><code>      ID: /tmp/tmp.conf
Function: file.managed
  Result: True
 Comment: File /tmp/tmp.conf updated
 Changes:   
          ----------
          diff:
              New file
          mode:
              0644
</code></pre>

<h2>Summary</h2>

<p>Succeeded: 1</p>

<h2>Failed:    0</h2>

<p>Total:     1</p>

<h1>表示完成</h1>

<p>[root@angel01 salt]# cat /tmp/tmp.conf
visible hostname  angel01
leon
7758258
server_os CentOS
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[saltstack minion,nodegroup,cmd.run (三) ]]></title>
    <link href="http://leon8693.github.io/blog/2014/09/30/saltstack-minion-nodegroup-cmd-dot-run-3/"/>
    <updated>2014-09-30T10:31:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/09/30/saltstack-minion-nodegroup-cmd-dot-run-3</id>
    <content type="html"><![CDATA[<h2>minion</h2>

<p>客户端标识默认采用主机名,也可以修改配置中的id来指定minion的名字    <br/>
vim /mnt/config/salt/minion <br/>
<code>
master: angel01.i.fdmdns.com
user: root
id: angel01.i.fdmdns.com #指定了这个客户端的名字
</code></p>

<p>查看minion状态,并且可以使用正则 <br/>
PS:必须在MASTER上操作 <br/>
```
[root@angel01 ~]# salt  &lsquo;angel01.i.fdmdns.com&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 ~]# salt  &lsquo;*&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 ~]# salt &lsquo;angel0[1-2].i.fdmdns.com&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 ~]# salt &lsquo;angel0*&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>```</p>

<!-- more -->


<p>上面展示了匹配的方式<br/>
test.ping 是salt默认命令,主要测试客户端存活情况</p>

<p>另2个参数常用 <br/>
-E来使用正则表达式 <br/>
-L以列表的方式匹配 <br/>
```
[root@angel01 ~]# salt -E &lsquo;angel0\w&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 ~]# salt -L &lsquo;angel01.i.fdmdns.com,angel02.i.fdmdns.com&rsquo;  test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>```
主要的一些匹配演示如上</p>

<h2>cmd.run</h2>

<p>这个是可以批量执行shell命令,可以代替我们以前复杂的for的<br/>
```
[root@angel01 ~]# salt -L &lsquo;angel01.i.fdmdns.com,angel02.i.fdmdns.com&rsquo;  cmd.run &ldquo;free -m|awk &lsquo;/Mem:/{print \$2}&rsquo;&rdquo;
angel01.i.fdmdns.com:</p>

<pre><code>3702
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>1869
</code></pre>

<p>```</p>

<h2>nodegroup</h2>

<p>nodegroup可以对我们现有的服务器进行分组,默认配置文件放在/etc/salt/master <br/>
这边为了更好的修改配置和区分,使用了default_include: /mnt/config/salt/master.d/<em>.conf <br/>
```
cat /etc/salt/master
include: /mnt/config/salt/master
default_include: /mnt/config/salt/master.d/</em>.conf
mkdir -p /mnt/config/salt/master.d/
vim /mnt/config/salt/master.d/nodegroups.conf</p>

<h1>group</h1>

<p>nodegroups:
  web1:  &lsquo;angel01.i.fdmdns.com&rsquo; #测试机1为单独一组
  web2:  &lsquo;angel02.i.fdmdns.com&rsquo; #测试机2为单独一租
/etc/init.d/salt-master restart</p>

<p>[root@angel01 ~]# salt -N &lsquo;web1&rsquo; test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>[root@angel01 ~]# salt -N &lsquo;web2&rsquo; test.ping
angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[saltstack config  (二)]]></title>
    <link href="http://leon8693.github.io/blog/2014/09/29/saltstack-config-2/"/>
    <updated>2014-09-29T17:08:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/09/29/saltstack-config-2</id>
    <content type="html"><![CDATA[<p>原文出处:<a href="http://blog.coocla.org/301.html">http://blog.coocla.org/301.html</a></p>

<p>配置文件/etc/salt/master</p>

<p>interface  <br/>
默认接口：0.0.0.0（所有的网络地址接口）  <br/>
绑定到本地的某个网络接口  <br/>
<code>
ginterface: 192.168.0.1
</code></p>

<p>publish_port  <br/>
默认值：4505  <br/>
设置master与minion的认证通信端口 <br/>
<code>
gpublish_port: 4505
</code>
user  <br/>
默认值：root  <br/>
运行salt进程的用户</p>

<p><code>
user: root
</code></p>

<p>max_open_files  <br/>
每一个minion连接到master，至少要使用一个文件描述符，如果足够多的minion连接到master上，你将会从控制台上看到 <br/>
<code>
gsalt-master crashes：
Too many open files (tcp_listener.cpp:335)
Aborted (core dumped)
</code></p>

<p>默认值这个值取决于ulimit -Hn的值，即系统的对打开文件描述符的硬限制   <br/>
如果你希望重新设置改值或者取消设置，记住这个值不能超过硬限制，提高硬限制取决于你的操作系统或分配，一个好的方法是internet找到对应操作系统的硬限制设置，比如这样搜索：</p>

<p><code>
graise max open files hard limit debian
max_open_files: 100000
worker_threads
</code></p>

<p>默认值：5   <br/>
启动用来接收或应答minion的线程数。如果你有很多minion，而且minion延迟你的应答，你可以适度的提高该值. 在点对点的系统环境中使用时，该值不要被设置为3以下，但是可以将其设置为1</p>

<p><code>
gworker_threads: 5
</code></p>

<p>gret_port  <br/>
默认值：4506  <br/>
这个端口是master用来发送命令或者接收minions的命令执行返回信息 <br/>
<code>
gret_port: 4506
</code></p>

<p>pidfile  <br/>
默认值：/var/run/salt-master.pid <br/>
指定master的pid文件位置  <br/>
<code>
pidfile: /var/run/salt-master.pid
</code></p>

<p>root_dir  <br/>
默认值：/  <br/>
指定该目录为salt运行的根目录，改变它可以使salt从另外一个目录开始运行，好比chroot  <br/>
<code>
root_dir: /
</code></p>

<p>pki_dir  <br/>
默认值：/etc/salt/pki  <br/>
这个目录是用来存放pki认证秘钥 <br/>
<code>
pki_dir: /etc/salt/pki
</code></p>

<!-- more -->


<p>cachedir   <br/>
默认值：/var/cache/salt  <br/>
这个目录是用来存放缓存信息，特别是salt工作执行的命令信息  <br/>
<code>
cachedir: /var/cache/salt
</code></p>

<p>keep_jobs   <br/>
默认值：24  <br/>
设置保持老的工作信息的过期时间，单位小时  <br/>
job_cache  <br/>
默认值：True   <br/>
设置master维护的工作缓存，这是一个很好的功能，当你的Minons超过5000台时，他将很好的承担这个大的架构，关闭这个选项，之前的工作执行以及工作系统将无法被利用，一般不推荐关掉改选项，开启改选项将会是很明智的，他将使master获得更快的IO系统   <br/>
ext_job_cache   <br/>
对所有的minions使用指定的默认值returner，当使用了这个参数来指定一个returner并且配置正确，minions将会一直将返回的数据返回到returner，这也会默认值禁用master的本地缓存  <br/>
<code>
ext_job_cache: redis
</code></p>

<p>minion_data_cache  <br/>
默认值：True  <br/>
minion data cache是关于minion信息存储在master上的参数，这些信息主要是pillar 和 grains数据.这些数据被缓存在cachedir定义的目录下的minion目录下以minion名为名的目录下并且预先确定哪些minions将从执行回复  <br/>
<code>
minion_cache_dir: True
</code></p>

<p>genforce_mine_cache  <br/>
默认值：False   <br/>
默认情况下当关闭了minion_data_cache，mine将会停止工作，因为mine是基于缓存数据，通过启用这个选项，我们将会显示的开启对于mine系统的缓存功能  <br/>
<code>
genforce_mine_cache: False
</code></p>

<p>sock_dir   <br/>
默认值：/tmp/salt-unix  <br/>
指定unix socket主进程通信的socket创建路径</p>

<p>master的安全配置  <br/>
open_mode  <br/>
默认值：False  <br/>
open_mode是一个危险的安全特性，当master遇到pki认证系统，秘钥混淆和身份验证失效时，打开open_mode，master将会接受所有的身份验证。这将会清理掉pki秘钥接受的minions。通常情况下open_mode不应该被打开，它只适用于短时间内清理pki keys，若要打开它，可将值调整为True  <br/>
<code>
open_mode: False
</code></p>

<p>auto_accept   <br/>
默认值：False   <br/>
开启auto_accept。这个设置将会使master自动接受所有发送公钥的minions <br/>
<code>
auto_accept: True
</code></p>

<p>autosign_file  <br/>
默认值：/etc/salt/autosign.conf  <br/>
如果autosign_file的值被指定，那么autosign_file将会通过该输入允许所有的匹配项，首先会搜索字符串进行匹配，然后通过正则表达式进行匹配。这是不安全的  <br/>
<code>
autosign_file: /etc/salt/autosign.conf
</code></p>

<p>client_acl   <br/>
默认值：{}  <br/>
开启对系统上非root的系统用户在master上执行特殊的模块，这些模块名可以使用正则表达式进行表示  <br/>
```
gclient_acl:
  fred:</p>

<pre><code>  - test.ping
  - pkg.*
</code></pre>

<p>```</p>

<p>client_acl_blacklist  <br/>
默认值：{}  <br/>
黑名单用户或模块  <br/>
这个例子表示所有非sudo用户以及root都无法通过cmd这个模块执行命令，默认情况改配置是完全禁用的  <br/>
```
gclient_acl_blacklist:
  users:</p>

<pre><code>  - root
  - '^(?!sudo_).*$'    # all non sudo users
</code></pre>

<p>  modules:</p>

<pre><code>  - cmd
</code></pre>

<p>```</p>

<p>external_auth   <br/>
默认值：{}  <br/>
salt的认证模块采用外部的认证系统用来做认证和验证用户在salt系统中的访问区域  <br/>
```
external_auth:
  pam:</p>

<pre><code>  fred:
      - test.*
</code></pre>

<p>```</p>

<p>token_expire    <br/>
默认：43200  <br/>
新令牌生成的时间间隔，单位秒，默认是12小时</p>

<p>token_expire: 43200  <br/>
file_recv  <br/>
默认值：False   <br/>
允许minions推送文件到master上，这个选项默认是禁用的，出于安全考虑</p>

<p>file_recv: False <br/>
master模块管理   <br/>
runner_dirs   <br/>
默认值：[] 设置搜索runner模块的额外路径</p>

<p>runner_dirs: []  <br/>
cython_enable  <br/>
默认值：False  <br/>
设置为true来开启对cython模块的编译</p>

<p>cython_enable: False <br/>
master状态系统设置   <br/>
state_verbose   <br/>
默认：False  <br/>
state_verbose允许从minions返回更多详细的信息，通常清空下只返回失败或者已经更改，但是将state_verbose设置为True,将会返回所有的状态检查</p>

<p>state_verbose: True <br/>
state_output  <br/>
默认值：full   <br/>
state_output的设置将会改变信息输出的格式，当被设置为”full”时，将全部的输出一行一行的显示输出；当被设置为”terse“时，将会被缩短为一行进行输出；当被设置为”mixed”时，输出样式将会是简洁的，除非状态失败，这种情况下将会全部输出；当被设置为”change”时，输出将会完全输出除非状态没有改变</p>

<p>state_output: full  <br/>
state_top   <br/>
默认值：top.sls  <br/>
状态系统使用一个入口文件告诉minions在什么环境下使用什么模块，这个状态入口文件被定义在基础环境的相对根路径下</p>

<p>state_top: top.sls <br/>
external_nodes   <br/>
默认值：None   <br/>
这个外部节点参数允许salt来收集一些数据，通常被放置在一个入口文件或外部节点控制器.外部节点的选择是可执行的，将会返回ENC数据，记住如果两者都启用的话salt会将外部节点和入口文件的结果进行综合汇总。</p>

<p>external_nodes: cobbler-ext-nodes <br/>
renderer  <br/>
默认值：yaml_jinja   <br/>
使用渲染器用来渲染minions的状态数据</p>

<p>renderer: yaml_jinja  <br/>
failhard  <br/>
默认值：False  <br/>
设置一个全局的failhard表示，当单个的状态执行失败后，将会通知所有的状态停止运行状态</p>

<p>failhard: False  <br/>
test   <br/>
默认值：False  <br/>
如果真的要作出改变或者仅仅通知将要执行什么改变时设置所有的状态调用为test</p>

<p>test: False <br/>
master文件服务器设置</p>

<p>fileserver_backend   <br/>
默认值： <br/>
<code>
fileserver_backend:
  - roots
</code></p>

<p>salt支持模块化的后端文件系统服务器，它允许salt通过第三方的系统来管理收集文件并提供给minions使用，可以配置多个后端文件系统，这里支持gitfs、hgfs、roots、s3fs文件调用的搜索顺序按照后台文件系统的配置顺序来搜索，默认的设置只开启了标准的后端服务器roots，具体的根选项配置通过file_roots参数设置</p>

<p><code>
gfileserver_backend:
  - roots
  - gitfs
</code></p>

<p>file_roots   <br/>
默认值：  <br/>
<code>
base:
  - /srv/salt
</code></p>

<p>salt运行一个轻量级的文件服务器通过ZeroMQ对minions进行文件传输，因此这个文件服务器是构造在master的守护进程中，并且不需要依赖于专用的端口 文件服务器的工作环境传递给master，每一个环境可以有多个跟目录，但是相同环境下多个文件的子目录不能相同，否则下载的文件将不能被可靠的保证，一个基础环境依赖于主的入口文件，如：</p>

<p>```
file_roots:
  base:</p>

<pre><code> - /srv/salt
</code></pre>

<p>  dev:</p>

<pre><code> - /srv/salt/dev/services
 - /srv/salt/dev/states
</code></pre>

<p>  prod:</p>

<pre><code> - /srv/salt/prod/services
 - /srv/salt/prod/states
</code></pre>

<p>```</p>

<p>hash_type <br/>
默认值：md5  <br/>
hash_type是用来当发现在master上需要对一个文件进行hash时的hash使用的算法，默认是md5.但是它也支持sha1,sha224,shar256,shar384,shar512  <br/>
<code>
hash_type: md5
</code></p>

<p>file_buffer_size  <br/>
默认值：1048576  <br/>
文件服务器的缓存区大小  <br/>
<code>
file_buffer_size: 1048576
</code></p>

<p>pillar配置   <br/>
pillar_roots   <br/>
默认值： <br/>
<code>
base:
  - /srv/pillar
</code>
设置不同的环境对应的存放pillar数据的目录，这个配置和file_roots参数配置一样</p>

<p>```
pillar_roots:
  base:</p>

<pre><code> - /srv/pillar
</code></pre>

<p>  dev:</p>

<pre><code> - /srv/pillar/dev
</code></pre>

<p>  prod:</p>

<pre><code>  - /srv/pillar/prod
</code></pre>

<p>```
ext_pillar   <br/>
当进行pillar数据收集时，这个ext_pillar参数允许调用任意数量的外部pillar接口，这个配置是基于ext_pillar函数，你可以从这个找到这个函数<a href="https://github.com/saltstack/salt/blob/develop/salt/pillar">https://github.com/saltstack/salt/blob/develop/salt/pillar</a>   <br/>
默认情况下，这个ext_pillar接口没有配置运行   <br/>
默认值：None</p>

<p>```
ext_pillar:
  &ndash; hiera: /etc/hiera.yaml
  &ndash; cmd_yaml: cat /etc/salt/yaml
  &ndash; reclass:</p>

<pre><code> inventory_base_uri: /etc/reclass
</code></pre>

<p>```
从这里可以查到pillar的一些额外细节</p>

<p>syndic server配置</p>

<p>syncdic是salt master用来通过从整体架构中高于自己层级的master或者syndic接收命令传递给minions的中间角色。使用syndic非常简单，如果这个master在整体架构中，他的下级存在syndic server，那么需要将master的配置文件中的”order_master”值设置为True，如果这个master还需要运行一个syndic进程，扮演另外一个角色，那么需要设置主master server的信息(上一级master)    <br/>
千万别忘记了，这将意味着它将与其他master共享它的minion的id和pki_dir</p>

<p>order_masters   <br/>
默认值：False   <br/>
当额外的数据需要发送和传递，并且这个master控制的minions是被低等级的master或syndic直接管理下，那么”order_masters”这个值必须得设置为True  <br/>
<code>
order_master: False
</code></p>

<p>syndic_master   <br/>
默认值：None   <br/>
如果这个master运行的salt-syndic连接到了一个更高层级的master,那么这个参数需要配置成连接到的这个高层级的master的地址  <br/>
<code>
syndic_master: masterofmasters
</code></p>

<p>syndic_master_port   <br/>
默认值：4506   <br/>
如果这个master运行的salt-syndic连接到了一个更高层级的master,那么这个参数需要配置成连接到的这个高层级master的监听端口  <br/>
<code>
syndic_master_port: 4506
</code></p>

<p>syndic_log_file   <br/>
默认值：syndic.log    <br/>
为syndic进程指定日志文件  <br/>
<code>
syndic_log_file: salt-syndic.log
</code></p>

<p>syndic_pidfile   <br/>
默认值：salt-syndic.pid  <br/>
为syndic进程指定pid文件  <br/>
<code>
syndic_pidfile: syndic.pid
</code></p>

<p>Peer Publish设置    <br/>
salt minions可以向其他minions发送命令，但是仅仅在minion允许的情况下。默认情况下”Peer Publication”是关闭的，当需要开启的时候，需要开启对应的minion和对应的命令，这样可以允许根据个人的minions安全的划分出命令   <br/>
peer   <br/>
默认值：{}    <br/>
这个配置使用正则表达式去匹配minions并且是一个正则表达式列表函数，下面这个例子将允许名为foo.example.com的minion认证通过后执行test和pkg模块中的函数   <br/>
```
peer:
  foo.example.com:</p>

<pre><code> - test.*
 - pkg.*
</code></pre>

<p><code>
这将允许所有的minion执行所有的命令      
</code>
peer:
  .*:</p>

<pre><code> - .*
</code></pre>

<p>```</p>

<p>这样的配置是极不推荐的，因为任何人得到架构中的任何一个minion即可拥有所有的minions，这是不安全的</p>

<p>peer_run   <br/>
默认值：{}               <br/>
peer_run参数是用来打开runners在master所允许的minions上，peer_run的配置匹配格式和peer参数的配置一样 下面这个例子允许foo.example.com的minion执行manage.up runner   <br/>
```
peer_run:
  foo.example.com:</p>

<pre><code> - manage.up
</code></pre>

<p>```</p>

<p>nodegroups  <br/>
默认值：{}  <br/>
minions允许通过node groups来分成多个逻辑组，每个组由一个组名和复合模式组成 <br/>
<code>
nodegroups:
  group1: 'L@foo.domain.com,bar.domain.com,baz.domain.com or bl*.domain.com'
  group2: 'G@os:Debian and foo.domain.com'
</code></p>

<p>Master日志设置   <br/>
log_file  <br/>
默认值：/var/log/salt/master  <br/>
master的日志可以发送到一个普通文件，本地路径名或者网络位置，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_file">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_file</a>   <br/>
例如：    <br/>
<code>
log_file: /var/log/salt/master
log_file: file:///dev/log
log_file: udp://loghost:10514
</code></p>

<p>log_level     <br/>
默认值：warning     <br/>
按照日志级别发送信息到控制台，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_level">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_level</a>    <br/>
<code>
log_level: warning
</code></p>

<p>log_level_logfile    <br/>
默认值：warning     <br/>
按照日志级别发送信息到日志文件，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_level_logfile">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_level_logfile</a>    <br/>
<code>
log_level_logfile: warning
</code>
log_datefmt     <br/>
默认值：%H:%M:%S    <br/>
发送到控制台信息所用的日期时间格式，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_datefmt">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_datefmt</a>    <br/>
<code>
log_datefmt: '%H:%M:%S'
</code></p>

<p>log_datefmt_logfile     <br/>
默认值: %Y-%m-%d %H:%M:%S     <br/>
发送到日志文件信息所用的日期时间格式，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_datefmt_logfile">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_datefmt_logfile</a>    <br/>
<code>
log_datefmt_logfile: '%Y-%m-%d %H:%M:%S'
</code>
log_fmt_console     <br/>
默认值: [%(levelname)-8s] %(message)s     <br/>
控制台日志信息格式，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_fmt_console">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_fmt_console</a>   <br/>
<code>
log_fmt_console: '[%(levelname)-8s] %(message)s'
</code>
log_fmt_logfile     <br/>
默认值: %(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s     <br/>
%(asctime)s：2003-07-08 16:49:45     <br/>
%(msecs)03.0f：当前时间的毫秒部分    <br/>
%(name)：日志记录调用器的名字    <br/>
%(levelname)：日志记录级别    <br/>
%(message)s：日志详细信息    <br/>
日志文件信息格式，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_fmt_logfile">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_fmt_logfile</a>         <br/>
<code>
log_fmt_logfile: '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'
</code></p>

<p>log_granular_levels</p>

<p>默认值：{}    <br/>
这可以更加具体的控制日志记录级别，更多详情请访问 <a href="http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_granular_levels">http://docs.saltstack.com/ref/configuration/logging/index.html#std:conf-log-log_granular_levels</a></p>

<p>Include 配置    <br/>
<code>
default_include
</code>
默认值：master.d/<em>.conf    <br/>
master可以从其他文件读取配置，默认情况下master将自动的将master.d/</em>.conf中的配置读取出来并应用，其中master.d目录是相对存在于主配置文件所在的目录    <br/>
include     <br/>
默认值：not defined     <br/>
master可以包含其他文件中的配置，要启用此功能，通过此参数定义路径或文件，此路径可以是相对的也可以是绝对的，相对的，会被看作相对于主配置文件所在的目录，路径中还可以使用类似于shell风格的通配符，如果没有文件匹配的路径传递给此选项，那么master将会在日志中记录一条警告的消息</p>

<p>```</p>

<h1>Include files from a master.d directory in the same</h1>

<pre><code># directory as the master config file
include: master.d/*
</code></pre>

<h1>Include a single extra file into the configuration</h1>

<p>include: /etc/roles/webserver</p>

<h1>Include several files and the master.d directory</h1>

<p>include:
  &ndash; extra_config
  &ndash; master.d/*
  &ndash; /etc/roles/webserver
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[saltstack install (一)]]></title>
    <link href="http://leon8693.github.io/blog/2014/09/29/saltstack-install-1/"/>
    <updated>2014-09-29T16:14:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/09/29/saltstack-install-1</id>
    <content type="html"><![CDATA[<h1>下载安装</h1>

<h5>Centos</h5>

<p>epel源或者centos源都有 <br/>
<code>
yum install salt-master -y #服务端
yum install salt-minion -y #客户端
</code></p>

<h5>Ubuntu</h5>

<p><code>
sudo apt-get install python-software-properties
echo deb http://ppa.launchpad.net/saltstack/salt/ubuntu `lsb_release -sc` main | sudo tee   
/etc/apt/sources.list.d/saltstack.list
wget -q -O- "http://keyserver.ubuntu.com:11371/pks/lookup?op=get&amp;amp;search=0x4759FA960E27C0A6" |sudo apt-key add -
sudo apt-get update
sudo apt-get install salt-master
sudo apt-get install salt-minion
</code></p>

<p>由于我配置文件目录更改,所以有些增加的选项都是非必要的,参考即可</p>

<h3>master配置</h3>

<p>vim /etc/salt/master  配置文件
<code>
include: /mnt/config/salt/master
default_include: /mnt/config/salt/master.d/*.conf
mkdir -p /mnt/config/salt/ /mnt/config/salt/master.d/
</code></p>

<!-- more -->


<p>vim /mnt/config/salt/master #主配置文件
<code>
interface: 192.168.0.210
user: root
auto_accept: True     #自动认证
worker_threads: 5     #工作线程，默认5，根据cpu调整
</code>
PS: /mnt/config/salt/master.d/ 这个目录会在下篇里面说到</p>

<p>/etc/init.d/salt-master start #启动</p>

<p>```</p>

<h1>表示启动成功</h1>

<p>[root@angel01 ~]# netstat -lntp |grep -E &ldquo;450[5|6]&rdquo;
tcp        0      0 192.168.0.210:4505          0.0.0.0:<em>                   LISTEN      20004/python2.6  <br/>
tcp        0      0 192.168.0.210:4506          0.0.0.0:</em>                   LISTEN      19996/python2.6 <br/>
```</p>

<h3>minion配置</h3>

<p>vim /etc/salt/minion 配置文件
<code>
include: /mnt/config/salt/minion
</code></p>

<p>vim /mnt/config/salt/minion
<code>
master: angel01.i.fdmdns.com    #master地址
user: root                      #启动用户
id: angel01.i.fdmdns.com        #这个就是服务器用来标示客户端的东西
</code>
/etc/init.d/salt-minion start #启动</p>

<p>第一次启动minion,minion会生成钥匙 <br/>
<code>
[root@angel01 /]# tree /etc/salt/pki/minion/
/etc/salt/pki/minion/
├── minion_master.pub
├── minion.pem
└── minion.pub
</code></p>

<h3>手动认证</h3>

<p>```
[root@angel01 ~]# salt-key
Accepted Keys:             #验证通过
Unaccepted Keys:          #等待验证的
angel01.i.fdmdns.com
Rejected Keys:               #拒绝</p>

<p>[root@angel01 ~]# salt-key -A
接受所有key
```</p>

<h3>salt-key的基本命令</h3>

<p><code>
salt-key -L #检测当前server端所有minion端key的情况，三种：接收、等待接收和拒绝
salt-key -a hostname #指定接收某台minion的key
salt-key -A #接收Unaccepted Keys下所有的minion
salt-key -d hostname #删除已经接收的机器中指定机器minion key (Accepted Keys:)
salt-key -D #删除已经接收的所有机器(Accepted Keys:)
</code></p>

<h3>测试</h3>

<p>```
[root@angel01 ~]# salt &lsquo;*&rsquo; test.ping
angel01.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>angel02.i.fdmdns.com:</p>

<pre><code>True
</code></pre>

<p>```</p>

<p>表示成功了！</p>

<h3>问题集合</h3>

<p>问题1 <br/>
ImportError: No module named salt.scripts <br/>
yum 的情况下salt的模块都安装在python2.6 进入/etc/init.d/salte-master进行修改 <br/>
<code>
批量修改命令
sed -i "s/^#\!\/usr\/bin\/python$/#\!\/usr\/bin\/python2.6/g" /usr/bin/salt-*
批量修改启动命令
sed -i "s/^PYTHON=\/usr\/bin\/python$/PYTHON=\/usr\/bin\/python2.6/g" /etc/init.d/salt-*
</code>
问题2 <br/>
[root@angel01 ~]# salt  &lsquo;angel01.i.fdmdns.com&rsquo; test.ping  <br/>
[ERROR   ] Salt request timed out. If this error persists, worker_threads may need to be increased. <br/>
Failed to authenticate, is this user permitted to execute commands?  <br/>
由于修改过启动配置文件直接读取/mnt/config/salt/导致,最后改成/etc/salt/master 添加include解决</p>
]]></content>
  </entry>
  
</feed>
