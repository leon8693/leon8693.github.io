<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 唯一的真理]]></title>
  <link href="http://leon8693.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://leon8693.github.io/"/>
  <updated>2014-11-07T10:39:23+08:00</updated>
  <id>http://leon8693.github.io/</id>
  <author>
    <name><![CDATA[leon]]></name>
    <email><![CDATA[bolatuleon@hotmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python OptionParser]]></title>
    <link href="http://leon8693.github.io/blog/2014/06/06/python-optionparser/"/>
    <updated>2014-06-06T15:28:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/06/06/python-optionparser</id>
    <content type="html"><![CDATA[<h2>脚本原型</h2>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<h1>&ndash;<em>&ndash; coding:utf-8 &ndash;</em></h1>

<h1>django添加数据库用户密码</h1>

<p>import sys
import os
from optparse import OptionParser</p>

<p>os.environ.setdefault( &ldquo;DJANGO_SETTINGS_MODULE&rdquo;, &ldquo;mysite.settings&rdquo; )
from accounts.models import User
import hashlib</p>

<h3>编码转移,可以输出中文</h3>

<p>reload(sys)
sys.setdefaultencoding(&lsquo;utf-8&rsquo;)</p>

<h3>%prog表示脚本本身</h3>

<p>MSG_USAGE = &ldquo;%prog [ -u <username>][-p <password>][-t &lt;user_type>][-h <help>]&rdquo;
MSG_VERSION = &ldquo;%prog 20140529&rdquo;</p>

<h3>usage打印用法,version输出版本信息</h3>

<p>optParser = OptionParser(usage=MSG_USAGE,version=MSG_VERSION)</p>

<h3>对optParser增加选项</h3>

<p>optParser.add_option(&ldquo;-u&rdquo;,&ldquo;&mdash;username&rdquo;,action = &ldquo;store&rdquo;,type = &ldquo;string&rdquo;,dest = &ldquo;UserName&rdquo;,help=&ldquo;添加数据库用户名(必填)&rdquo;)
optParser.add_option(&ldquo;-p&rdquo;,&ldquo;&mdash;password&rdquo;,action = &ldquo;store&rdquo;,type = &ldquo;string&rdquo;,dest = &ldquo;Password&rdquo;,help=&ldquo;添加数据库密码(必填)&rdquo;)
optParser.add_option(&ldquo;-t&rdquo;,&ldquo;&mdash;user_type&rdquo;,action = &ldquo;store&rdquo;,type = &ldquo;string&rdquo;,dest = &ldquo;User_Type&rdquo;,default=&ldquo;1&rdquo;,help=&ldquo;添加用户权限,0为管理员,1为普通,默认为1&rdquo;)</p>

<h1>fakeArgs = [&lsquo;-u&rsquo;,&lsquo;leon&rsquo;,&lsquo;-p&rsquo;,&lsquo;123456&rsquo;,&lsquo;-t&rsquo;,&lsquo;a&rsquo;]</h1>

<p>options,args = optParser.parse_args()</p>

<p>TYPE = options.User_Type
USERNAME = options.UserName
PASSWORD = options.Password</p>

<h1>User_Type返回不是1或者0则退出</h1>

<p>if TYPE not in (&lsquo;1&rsquo;,&lsquo;0&rsquo;):</p>

<pre><code>optParser.print_help()
sys.exit(1)
</code></pre>

<h1>判断参数-u,-p是否为空,返回帮助</h1>

<p>args_list = [USERNAME,PASSWORD]
for i in args_list:</p>

<pre><code>if i is None:
    print '请使用(-h,--help)来获得帮助'
    sys.exit(0)
</code></pre>

<h1>User是在accounts中models.py的类,定义了数据库的一些信息,插入用户</h1>

<h1>判断用户是否存在</h1>

<p>def init():</p>

<pre><code>CHECK_NAME=User.objects.filter(name=USERNAME)
if len(CHECK_NAME) &gt; 0:
    print "%s 用户已经存在" % USERNAME
else:
    u = User(name=USERNAME, password=hashlib.md5(PASSWORD).hexdigest(), user_type=TYPE)
    u.save()
</code></pre>

<p>if &lsquo;<strong>main</strong>&rsquo; == <strong>name</strong>:</p>

<pre><code>init()
</code></pre>

<p>```</p>

<!-- more -->


<p>中间我碰到过一个错误<br/>
UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xe6 in position 204: ordinal not in range(128)<br/>
字符集问题，导致超出长度,所以需要在最前面的地方添加<br/>
<code>
reload(sys)
sys.setdefaultencoding('utf-8')
</code></p>

<p>下面这个语句就是产生一个OptionParser的物件，传入2个值，并且通过usage和version定义，这个在使用-h|&mdash;help 会产生效果.<br/>
<code>
optParser = OptionParser(usage=MSG_USAGE,version=MSG_VERSION)
</code></p>

<p>对optParser增加选项
<code>
optParser.add_option("-u","--username",action = "store",type = "string",dest = "UserName",help="添加数据库用户名(必填)")
</code></p>

<p>add_option()参数说明:前面2个"&ldquo;里面的参数是，使用脚本时需要指定的选项<br/>
1.action&mdash;&mdash;是存储方式，分为3种<code>store</code>,<code>store_false</code>,<code>store_true</code>，一般情况下是store,store_false,store_true,都代表参数存在则为true或者false,当false,dest后面的变量将为None</p>

<p>2.type&mdash;&mdash;type代表该option存储dest的形态,支持的形态有string, int,long, choice, float 和 complex,这一块不全部讲，需要用到的时候查看，简单说一个int，如果type使用的是int,那么参数后面（如-u aaa)时，由于aaa不是数字所以type这边就会报错，返回报错信息</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python class]]></title>
    <link href="http://leon8693.github.io/blog/2014/04/25/python/"/>
    <updated>2014-04-25T13:55:00+08:00</updated>
    <id>http://leon8693.github.io/blog/2014/04/25/python</id>
    <content type="html"><![CDATA[<h2>Class</h2>

<h4>1.典型类的调用方法</h4>

<p>```python</p>

<h1>简单类的方式</h1>

<p>class myclass:                          #定义一个类的名称为myclass</p>

<pre><code>"this is myclass"                   #定义一个类的说明文档
a=100                               #类的属性,a是成员,可以用类名直接访问
def __init__(self):                 #定义类初始化
    self.name = "alex"              #定义name和age属性,并定义方法，必须由类的实例来调用
    self.age = "23"
</code></pre>

<p>print myclass.a
A = myclass()                           #实例化类
print A.name                            #类实例化后调用name属性
print A.age</p>

<p><code>``
python中</code>self<code>只有在类的方法中才会有，</code>self<code>在定义类的方法时必须有，不需要传入相应参数，</code>self`名称也不是必须的，将上面self替换成myname或是任何其他名称也是可以的</p>

<!-- more -->


<h4>2.新类以及动态赋值</h4>

<p>```python</p>

<h1>新类表达方式以及动态调用</h1>

<p>class Account(object):                  #在新建Account名字的类时添加object表示属于新类，这个在python2.2版本中引进的,3后面默认是新类</p>

<pre><code>"一个简单的类"                      #类的说明文档
account_type="Basic"                #你懂的
def __init__(self,name,balance):    #初始化，并且设定2个属性
    "初始化一个新的Account实例"
    self.name=name                  #self.name,self.balance的访问方式访问成员属性
    self.balance=balance
def deposit(self,amt):              #设定类中deposit函数
    "存款"
    self.balance=self.balance+amt   #设定deposit函数中balance属性获取方式
def withdraw(self,amt):
    "取款"
    self.balance=self.balance-amt   #设定withdraw函数中balance属性获取方式
def inquiry(self):                  #inquiry函数定义最后返回的balance数值
    "返回当前余额"
    return self.balance
</code></pre>

<p>print Account.account_type
A=Account(&lsquo;leon&rsquo;,500)                   #实例化类并且赋上默认值
A.deposit(500)                          #函数deposit中对成员amt赋值
A.withdraw(300)                         #函数withdraw中对成员amt赋值
print A.name                            #调用A.name属性
print A.balance                         #调用A.balance属性
```</p>

<p>python2.7中，必须在新建类时添加<code>object</code>方法来使这个类成为新类，不过在python3以后默认就是新类，新类和旧类相比多些新的属性。
上面例子就是简单的条用方式和赋值方法。</p>

<h4>3.类的class属性</h4>

<p>接上面的类打印class的一些属性
<code>python
B=Account.__name__                      #name属性需要实例化后才可调用
C=Account.__base__                      #base属性需要实例化后才可调用
print A.__doc__                         #类型帮助信息
print B                                 #类型名称
print A.__module__                      #类型所在模块
print C                                 #类型所继承的基类
print A.__dict__                        #类型字典，存储所有类型成员信息
print A.__class__                       #类型
</code></p>

<h4>小知识</h4>

<p>这个参数定义在开头就可以在python脚本中添加中文注释了
```python</p>

<h1>&ndash;<em>&ndash; coding:utf-8 &ndash;</em></h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
